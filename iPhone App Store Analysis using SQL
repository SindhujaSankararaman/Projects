create table applestore_description_combined AS
select * from appleStore_description1
union all 
select * from appleStore_description2
union all 
select * from appleStore_description3
union all 
select * from appleStore_description4
--  check the no of unique apps in both the tables
select count(DISTINCT ID) AS UniqueAppIDs
from AppleStore
select count(DISTINCT ID) AS UniqueAppIDs
from applestore_description_combined
-- check for missing values in some of the key fields of the table
select count(*) as MissingValues
from AppleStore
where ID is null or user_rating is null or track_name is null or prime_genre is null
select count(*) as MissingValues
from applestore_description_combined
where ID is null or track_name is null or app_desc is NULL
-- no data quality issues in both the tables 
-- find out the no of apps per genre 
select prime_genre, count(*) as No_of_apps
FROM AppleStore
GROUP BY prime_genre
ORDER BY No_of_apps DESC 
--Games and Enterteinment genres are clearly leading with a huge no of apps
-- Get an overview of the apps ratings
select min(user_rating) as MinRating,
       max(user_rating) as MaxRating,
       avg(user_rating) as AvgRating
From AppleStore
--Determine whether paid apps have higher rating than free apps
select 
case 
   When price> 0 then 'Paid'
   Else "Free"
   end as app_type,
   avg(user_rating) as Avg_rating
from AppleStore
group by app_type
-- Rating of Paid apps is slightly higher compared to the free apps

-- check if apps with more supported languages have higher ratings
select 
case 
   When lang_num < 10 then '<10 languages'
   When lang_num BETWEEN 10 and 30 then '10-30 languages'
   Else ">30 languages"
   end as language_bucket,
   avg(user_rating) as Avg_rating
from AppleStore
group by language_bucket
order by  Avg_rating desc
-- check genres with low ratings
select 
prime_genre,
avg(user_rating) as Avg_rating
from AppleStore
group by prime_genre
order by Avg_rating asc
LIMIT 10
